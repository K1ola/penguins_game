// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjson

import (
	"encoding/json"
	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeGameEasyjson(in *jlexer.Lexer, out *PenguinMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "clockwise":
			out.Clockwise = bool(in.Bool())
		case "alpha":
			out.Alpha = int(in.Int())
		case "result":
			out.Result = GameResult(in.String())
		case "score":
			out.Score = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson(out *jwriter.Writer, in PenguinMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"clockwise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Clockwise))
	}
	{
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PenguinMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PenguinMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PenguinMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PenguinMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson(l, v)
}
func easyjson4086215fDecodeGameEasyjson1(in *jlexer.Lexer, out *OutcomeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ServerMessage(in.String())
		case "payload":
			(out.Payload).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson1(out *jwriter.Writer, in OutcomeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Payload).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutcomeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutcomeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutcomeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutcomeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson1(l, v)
}
func easyjson4086215fDecodeGameEasyjson2(in *jlexer.Lexer, out *OutPayloadMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "penguin":
			(out.Penguin).UnmarshalEasyJSON(in)
		case "gun":
			(out.Gun).UnmarshalEasyJSON(in)
		case "PiscesCount":
			out.PiscesCount = uint(in.Uint())
		case "round":
			out.Round = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson2(out *jwriter.Writer, in OutPayloadMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"penguin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Penguin).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gun\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Gun).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"PiscesCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.PiscesCount))
	}
	{
		const prefix string = ",\"round\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Round))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutPayloadMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutPayloadMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutPayloadMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutPayloadMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson2(l, v)
}
func easyjson4086215fDecodeGameEasyjson3(in *jlexer.Lexer, out *IncomeMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ClientCommand(in.String())
		case "payload":
			(out.Payload).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson3(out *jwriter.Writer, in IncomeMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Payload).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson3(l, v)
}
func easyjson4086215fDecodeGameEasyjson4(in *jlexer.Lexer, out *InPayloadMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "mode":
			out.Mode = GameMode(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson4(out *jwriter.Writer, in InPayloadMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InPayloadMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InPayloadMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InPayloadMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InPayloadMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson4(l, v)
}
func easyjson4086215fDecodeGameEasyjson5(in *jlexer.Lexer, out *GunMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "clockwise":
			out.Clockwise = bool(in.Bool())
		case "alpha":
			out.Alpha = int(in.Int())
		case "result":
			out.Result = GameResult(in.String())
		case "score":
			out.Score = uint(in.Uint())
		case "bullet":
			(out.Bullet).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson5(out *jwriter.Writer, in GunMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"clockwise\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Clockwise))
	}
	{
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Score))
	}
	{
		const prefix string = ",\"bullet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Bullet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GunMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GunMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GunMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GunMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson5(l, v)
}
func easyjson4086215fDecodeGameEasyjson6(in *jlexer.Lexer, out *BulletMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "distance_from_center":
			out.DistanceFromCenter = int(in.Int())
		case "alpha":
			out.Alpha = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeGameEasyjson6(out *jwriter.Writer, in BulletMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"distance_from_center\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DistanceFromCenter))
	}
	{
		const prefix string = ",\"alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulletMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeGameEasyjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulletMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeGameEasyjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulletMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeGameEasyjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulletMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeGameEasyjson6(l, v)
}
