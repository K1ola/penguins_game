// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package easyjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA55bb507DecodeGameEasyjson(in *jlexer.Lexer, out *RoomState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Penguin":
			if in.IsNull() {
				in.Skip()
				out.Penguin = nil
			} else {
				if out.Penguin == nil {
					out.Penguin = new(PenguinState)
				}
				(*out.Penguin).UnmarshalEasyJSON(in)
			}
		case "Gun":
			if in.IsNull() {
				in.Skip()
				out.Gun = nil
			} else {
				if out.Gun == nil {
					out.Gun = new(GunState)
				}
				(*out.Gun).UnmarshalEasyJSON(in)
			}
		case "Fishes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fishes = make(map[int]*FishState)
				} else {
					out.Fishes = nil
				}
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v1 *FishState
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(FishState)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Fishes)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CurrentTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CurrentTime).UnmarshalJSON(data))
			}
		case "Round":
			out.Round = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA55bb507EncodeGameEasyjson(out *jwriter.Writer, in RoomState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Penguin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Penguin == nil {
			out.RawString("null")
		} else {
			(*in.Penguin).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Gun\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Gun == nil {
			out.RawString("null")
		} else {
			(*in.Gun).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Fishes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Fishes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Fishes {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CurrentTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CurrentTime).MarshalJSON())
	}
	{
		const prefix string = ",\"Round\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Round))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoomState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA55bb507EncodeGameEasyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoomState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA55bb507EncodeGameEasyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoomState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA55bb507DecodeGameEasyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoomState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA55bb507DecodeGameEasyjson(l, v)
}
func easyjsonA55bb507DecodeGameEasyjson1(in *jlexer.Lexer, out *PenguinState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "ClockwiseDirection":
			out.ClockwiseDirection = bool(in.Bool())
		case "Alpha":
			out.Alpha = int(in.Int())
		case "Result":
			out.Result = GameResult(in.String())
		case "Score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA55bb507EncodeGameEasyjson1(out *jwriter.Writer, in PenguinState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"ClockwiseDirection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ClockwiseDirection))
	}
	{
		const prefix string = ",\"Alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	{
		const prefix string = ",\"Result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	{
		const prefix string = ",\"Score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PenguinState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA55bb507EncodeGameEasyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PenguinState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA55bb507EncodeGameEasyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PenguinState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA55bb507DecodeGameEasyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PenguinState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA55bb507DecodeGameEasyjson1(l, v)
}
func easyjsonA55bb507DecodeGameEasyjson2(in *jlexer.Lexer, out *GunState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "ClockwiseDirection":
			out.ClockwiseDirection = bool(in.Bool())
		case "Alpha":
			out.Alpha = int(in.Int())
		case "Bullet":
			if in.IsNull() {
				in.Skip()
				out.Bullet = nil
			} else {
				if out.Bullet == nil {
					out.Bullet = new(BulletState)
				}
				(*out.Bullet).UnmarshalEasyJSON(in)
			}
		case "Result":
			out.Result = GameResult(in.String())
		case "Score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA55bb507EncodeGameEasyjson2(out *jwriter.Writer, in GunState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"ClockwiseDirection\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ClockwiseDirection))
	}
	{
		const prefix string = ",\"Alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	{
		const prefix string = ",\"Bullet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Bullet == nil {
			out.RawString("null")
		} else {
			(*in.Bullet).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	{
		const prefix string = ",\"Score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GunState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA55bb507EncodeGameEasyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GunState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA55bb507EncodeGameEasyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GunState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA55bb507DecodeGameEasyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GunState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA55bb507DecodeGameEasyjson2(l, v)
}
func easyjsonA55bb507DecodeGameEasyjson3(in *jlexer.Lexer, out *FishState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Alpha":
			out.Alpha = int(in.Int())
		case "Eaten":
			out.Eaten = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA55bb507EncodeGameEasyjson3(out *jwriter.Writer, in FishState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	{
		const prefix string = ",\"Eaten\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Eaten))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FishState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA55bb507EncodeGameEasyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FishState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA55bb507EncodeGameEasyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FishState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA55bb507DecodeGameEasyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FishState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA55bb507DecodeGameEasyjson3(l, v)
}
func easyjsonA55bb507DecodeGameEasyjson4(in *jlexer.Lexer, out *BulletState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Alpha":
			out.Alpha = int(in.Int())
		case "DistanceFromCenter":
			out.DistanceFromCenter = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA55bb507EncodeGameEasyjson4(out *jwriter.Writer, in BulletState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Alpha\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Alpha))
	}
	{
		const prefix string = ",\"DistanceFromCenter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DistanceFromCenter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulletState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA55bb507EncodeGameEasyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulletState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA55bb507EncodeGameEasyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulletState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA55bb507DecodeGameEasyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulletState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA55bb507DecodeGameEasyjson4(l, v)
}
